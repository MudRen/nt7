// 玩家任务守护进程：block.c

// 初步构思：
// 1、由故事系统定时推出雁门关外阻击故事，唤醒任务守护。
// 2、任务守护进行场景的初始化，移动需要的 NPC 到场景。
// 3、任务守护启动任务物件，任务物件按照心跳，定时派出
//    契丹武士对场景进行攻击。
// 4、如果任一契丹武士突破雁门关则宣告阻击失败，播放失
//    败情节故事。
// 5、每杀死一个契丹武士都有一定奖励，全歼则有追加奖励，
//    播放成功情节故事。
// 6、玩家也可以站在辽国一方，尝试杀死参与阻击的 NPC，
//    成功者同样有奖励，若阻击失败，则有追加奖励。

#include <ansi.h>

void startup();

// 新任务能够在的地点
string *env_room = ({ 
        "/d/yanmen/gate",
        "/d/yanmen/shance",
        "/d/yanmen/shibi",
        "/d/yanmen/luanshi1",
        "/d/yanmen/luanshi2",
        "/d/yanmen/luanshi3",
        "/d/yanmen/luanshi4",
        "/d/yanmen/luanshi5",
        "/d/yanmen/luanshi6",
        "/d/yanmen/luanshi7",
        "/d/yanmen/luanshi8",
        "/d/yanmen/road",
});

string *block_npcs = ({ 
        "/d/yanmen/npc/xuanci",
        "/d/yanmen/npc/zhiguang",
        "/d/yanmen/npc/wangjt",
        "/d/yanmen/npc/wangwy",
        "/d/yanmen/npc/zhaoqs",
        "/d/yanmen/npc/huanghe",
});

// 任务对象创建
void create()
{
        seteuid(getuid());
        if (! clonep() && find_object(QUEST_D)) startup();
}

void start_quest()
{
        object npc;              // 当时操作的NPC对象
        string name;             // 当时操作的NPC文件名字
        string *npcs;            // 总共使用过的NPC对象
        object *obs;             // 目前所有的(BLOCK)任务
        object env;              // 当时操作的房间
        object qob;              // 任务物件
        int i;                   // 有关数值
        int env_count, npc_count;// 统计资料

        // 如果任务已经展开了，那么不启动
        obs = children("/clone/quest/block");
        if (arrayp(obs) && sizeof(obs) > 0)
                return;

        if (sizeof(env_room) < 1)
                // 无法找到这样的地点
                return;

        npcs = block_npcs;
        for (i = 0; i < sizeof(env_room); i++)
        {
                if (! arrayp(npcs) || ! sizeof(npcs))
                        break;

                // 生成一个可用的NPC
                name = npcs[random(sizeof(npcs))];
                if (! objectp(npc = new(name)))
                        continue;
                npcs -= ({ name });
                npc_count++;
                
                // 寻找一个适合的地点
                if (! objectp(env = get_object(env_room[i])))
                        continue;
                npc->move(env);
                npc->set_short_desc("正在" + (random(2) ? "聚精会神" : "大气不敢喘") +
                                    "地埋伏着。");
                env_count++;
        }
        qob = new("/clone/quest/block");
        qob->init_quest();

        CHANNEL_D->do_channel(find_object(QUEST_D),
                              "sys", "进程(BLOCK)在 " + env_count +
                              HIR " 处地点利用 " + npc_count +
                              HIR " 个 NPC 创建了一个任务。");
}

// 由故事系统唤醒这个进程
void startup()
{
        // 启动
        if (! find_object(QUEST_D))
                return;

        CHANNEL_D->do_channel(find_object(QUEST_D),
                              "sys", "进程(BLOCK)启动了。");
        // 启动时创建任务
        start_quest();
}